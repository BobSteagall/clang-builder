--- ToolChains.cpp-orig	2017-01-10 16:13:08.000000000 -0500
+++ ToolChains.cpp	2017-05-06 15:05:26.946878223 -0400
@@ -3672,8 +3672,11 @@
        Triple.getArch() == llvm::Triple::ppc) &&
       D.getVFS().exists(getDriver().SysRoot + "/usr/lib32/crt1.o"))
     getFilePaths().push_back(getDriver().SysRoot + "/usr/lib32");
-  else
+  else {
+    //- KEWB
+    getFilePaths().push_back(getDriver().Dir + "/../lib");
     getFilePaths().push_back(getDriver().SysRoot + "/usr/lib");
+  }
 }
 
 ToolChain::CXXStdlibType FreeBSD::GetDefaultCXXStdlibType() const {
@@ -4161,6 +4164,11 @@
   const std::string OSLibDir = getOSLibDir(Triple, Args);
   const std::string MultiarchTriple = getMultiarchTriple(D, Triple, SysRoot);
 
+  //- KEWB
+  if (GetCXXStdlibType(Args) == ToolChain::CST_Libcxx) {
+    addPathIfExists(D, getDriver().Dir + "/../lib", Paths);
+  }
+
   // Add the multilib suffixed paths where they are available.
   if (GCCInstallation.isValid()) {
     const llvm::Triple &GCCTriple = GCCInstallation.getTriple();
@@ -4695,6 +4703,23 @@
   }
 }
 
+//- KEWB
+void Linux::AddCXXStdlibLibArgs(const ArgList &Args,
+                                ArgStringList &CmdArgs) const {
+  CXXStdlibType Type = GetCXXStdlibType(Args);
+
+  switch (Type) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    CmdArgs.push_back("-lstdc++");
+    break;
+
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lstdc++");
+    break;
+  }
+}
+
 void Linux::AddCudaIncludeArgs(const ArgList &DriverArgs,
                                ArgStringList &CC1Args) const {
   CudaInstallation.AddCudaIncludeArgs(DriverArgs, CC1Args);
