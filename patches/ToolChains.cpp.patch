--- ToolChains.cpp-orig	2017-01-07 10:09:11.124740214 -0500
+++ ToolChains.cpp	2017-01-07 12:59:52.822624709 -0500
@@ -3430,8 +3430,11 @@
        Triple.getArch() == llvm::Triple::ppc) &&
       D.getVFS().exists(getDriver().SysRoot + "/usr/lib32/crt1.o"))
     getFilePaths().push_back(getDriver().SysRoot + "/usr/lib32");
-  else
+  else {
+    //- KEWB
+    getFilePaths().push_back(getDriver().SysRoot + std::string(LLVM_PREFIX) + "/lib");
     getFilePaths().push_back(getDriver().SysRoot + "/usr/lib");
+  }
 }
 
 ToolChain::CXXStdlibType FreeBSD::GetDefaultCXXStdlibType() const {
@@ -3448,6 +3451,10 @@
 
   switch (GetCXXStdlibType(DriverArgs)) {
   case ToolChain::CST_Libcxx:
+    //- KEWB
+    addSystemInclude(DriverArgs, CC1Args,
+                     getDriver().SysRoot + std::string(LLVM_PREFIX) +
+                     "/include/c++/v1");
     addSystemInclude(DriverArgs, CC1Args,
                      getDriver().SysRoot + "/usr/include/c++/v1");
     break;
@@ -4061,6 +4068,11 @@
   const std::string OSLibDir = getOSLibDir(Triple, Args);
   const std::string MultiarchTriple = getMultiarchTriple(D, Triple, SysRoot);
 
+  //- KEWB
+  if (GetCXXStdlibType(Args) == ToolChain::CST_Libcxx) {
+    addPathIfExists(D, SysRoot + std::string(LLVM_PREFIX) + "/lib", Paths);
+  }
+
   // Add the multilib suffixed paths where they are available.
   if (GCCInstallation.isValid()) {
     const llvm::Triple &GCCTriple = GCCInstallation.getTriple();
@@ -4526,6 +4538,8 @@
   // Check if libc++ has been enabled and provide its include paths if so.
   if (GetCXXStdlibType(DriverArgs) == ToolChain::CST_Libcxx) {
     const std::string LibCXXIncludePathCandidates[] = {
+        //- KEWB
+        DetectLibcxxIncludePath(getDriver().SysRoot + std::string(LLVM_PREFIX) + "/include/c++"),
         DetectLibcxxIncludePath(getDriver().Dir + "/../include/c++"),
         // If this is a development, non-installed, clang, libcxx will
         // not be found at ../include/c++ but it likely to be found at
@@ -4592,6 +4606,23 @@
   }
 }
 
+//- KEWB
+void Linux::AddCXXStdlibLibArgs(const ArgList &Args,
+                                ArgStringList &CmdArgs) const {
+  CXXStdlibType Type = GetCXXStdlibType(Args);
+
+  switch (Type) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    CmdArgs.push_back("-lstdc++");
+    break;
+
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lstdc++");
+    break;
+  }
+}
+
 void Linux::AddCudaIncludeArgs(const ArgList &DriverArgs,
                                ArgStringList &CC1Args) const {
   if (DriverArgs.hasArg(options::OPT_nocudainc))
